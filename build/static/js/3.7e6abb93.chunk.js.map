{"version":3,"sources":["Components/UI/Input/Input.js","Components/UI/Input/Input.module.css","Components/CheckoutSummary/CheckoutSum.module.css","Containers/Checkout/ContactInfo/ContactInfo.module.css","Components/CheckoutSummary/CheckoutSum.js","Containers/Checkout/ContactInfo/ContactInfo.js","Containers/Checkout/Checkout.js"],"names":["input","props","inputVar","inputStyles","styles","InputEl","invalid","shouldValidate","touched","push","Invalid","elemtype","className","join","elemConfig","onChange","change","value","placeholder","options","map","option","key","displayVal","Label","label","module","exports","checkoutSummary","Contain","CheckoutSum","style","textAlign","paddingTop","width","margin","IceCream","ingredients","Btn","to","Button","btnType","clicked","cancel","proceed","ContactInfo","state","orderForm","name","elemType","type","validation","required","valid","address","zipCode","minLength","maxLength","city","province","email","deliveryMode","formIsValid","verified","rules","isValid","trim","length","submitHandler","e","preventDefault","formInfo","formId","ings","price","orderInfo","userId","alert","history","onOrderIcecream","token","inputChangeHandler","inputId","orderedForm","targeted","target","iptSel","setState","formsArr","this","id","config","form","onSubmit","Input","disabled","loading","Spinner","Component","connect","icecreamBuilder","totalPrice","order","auth","dispatch","orderActions","Checkout","checkoutCancel","goBack","checkoutProceed","replace","summary","boughtRedirect","purchased","path","match","component","bought"],"mappings":"6GAAA,qCAmDeA,IAhDD,SAACC,GACb,IAAIC,EAAW,KAETC,EAAc,CAACC,IAAOC,SAM5B,OAJIJ,EAAMK,SAAWL,EAAMM,gBAAkBN,EAAMO,SACjDL,EAAYM,KAAKL,IAAOM,SAGlBT,EAAMU,UACZ,IAAM,QACJT,EAAW,yCAAOU,UAAWT,EAAYU,KAAK,MACxCZ,EAAMa,WADD,CAETC,SAAUd,EAAMe,OAChBC,MAAOhB,EAAMgB,MACbC,YAAajB,EAAMiB,eACrB,MACF,IAAM,SACJhB,EAAW,0CACTU,UAAWT,EAAYU,KAAK,MAASZ,EAAMa,WADlC,CAETG,MAAOhB,EAAMgB,MACbF,SAAUd,EAAMe,SAEff,EAAMa,WAAWK,QAAQC,KAAI,SAAAC,GAC5B,OAAO,4BAAQC,IAAKD,EAAOJ,MAAOA,MAAOI,EAAOJ,OAC7CI,EAAOE,gBAId,MACF,IAAM,WACJrB,EAAW,4CAAUU,UAAWT,EAAYU,KAAK,KAC/CI,MAAOhB,EAAMgB,MAAOF,SAAUd,EAAMe,QAAYf,EAAMa,aACxD,MACF,QACEZ,EAAW,yCAAOU,UAAWT,EAAYU,KAAK,MACxCZ,EAAMa,WADD,CAETC,SAAUd,EAAMe,OAChBC,MAAOhB,EAAMgB,SAGnB,OACE,6BACE,2BAAOL,UAAWR,IAAOoB,OAAQvB,EAAMwB,OACtCvB,K,mBC9CPwB,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,MAAQ,qBAAqB,QAAU,uBAAuB,QAAU,yB,mBCAvHD,EAAOC,QAAU,CAAC,YAAc,iCAAiC,IAAM,yBAAyB,QAAU,+B,mBCA1GD,EAAOC,QAAU,CAAC,YAAc,mC,uJCiCjBC,EA3BS,SAAC3B,GACvB,OACE,kBAAC,IAAD,KACE,yBAAKW,UAAWR,IAAOyB,SACrB,yBAAKjB,UAAWR,IAAO0B,aACrB,wBAAIC,MAAO,CAAEC,UAAW,SAAUC,WAAY,SAA9C,6BAGA,yBAAKF,MAAO,CAAEG,MAAO,OAAQC,OAAQ,SACnC,kBAACC,EAAA,EAAD,CAAUC,YAAapC,EAAMoC,iBAInC,yBAAKzB,UAAWR,IAAOkC,KACrB,kBAAC,IAAD,CAAMC,GAAG,KACP,kBAACC,EAAA,EAAD,CAAQC,QAAQ,SAASC,QAASzC,EAAM0C,QAAxC,WAIF,kBAACH,EAAA,EAAD,CAAQC,QAAQ,UAAUC,QAASzC,EAAM2C,SAAzC,e,yCCjBFC,E,4MACJC,MAAQ,CACNC,UAAW,CACTC,KAAM,CACJC,SAAU,QACVnC,WAAY,CACVI,YAAa,YACbgC,KAAM,QAERjC,MAAO,GACPkC,WAAY,CACVC,UAAU,GAEZC,OAAO,EACP7C,SAAS,GAEX8C,QAAS,CACPL,SAAU,QACVnC,WAAY,CACVI,YAAa,eACbgC,KAAM,QAERjC,MAAO,GACPkC,WAAY,CACVC,UAAU,GAEZC,OAAO,EACP7C,SAAS,GAEX+C,QAAS,CACPN,SAAU,QACVnC,WAAY,CACVI,YAAa,oDACbgC,KAAM,QAERjC,MAAO,GACPkC,WAAY,CACVC,UAAU,EACVI,UAAW,EACXC,UAAW,GAEbJ,OAAO,EACP7C,SAAS,GAEXkD,KAAM,CACJT,SAAU,QACVnC,WAAY,CACVI,YAAa,YACbgC,KAAM,QAERjC,MAAO,GACPkC,WAAY,CACVC,UAAU,GAEZC,OAAO,EACP7C,SAAS,GAEXmD,SAAU,CACRV,SAAU,QACVnC,WAAY,CACVI,YAAa,gBACbgC,KAAM,QAERjC,MAAO,GACPkC,WAAY,CACVC,UAAU,GAEZC,OAAO,EACP7C,SAAS,GAEXoD,MAAO,CACLX,SAAU,QACVnC,WAAY,CACVI,YAAa,gBACbgC,KAAM,SAERjC,MAAO,GACPkC,WAAY,CACVC,UAAU,GAEZC,OAAO,EACP7C,SAAS,GAEXqD,aAAc,CACZZ,SAAU,SACVnC,WAAY,CACVK,QAAS,CACP,CAAEF,MAAO,GAAIM,WAAY,mCACzB,CAAEN,MAAO,UAAWM,WAAY,WAChC,CAAEN,MAAO,QAASM,WAAY,WAGlCN,MAAO,GACPkC,WAAY,GACZE,OAAO,IAGXS,aAAa,G,EAGfC,SAAW,SAAC9C,EAAO+C,GACjB,IAAIC,GAAU,EAYd,OAVID,EAAMZ,WACRa,EAA2B,KAAjBhD,EAAMiD,QAEdF,EAAMR,YACRS,EAAUhD,EAAMkD,QAAUH,EAAMR,WAAaS,GAE3CD,EAAMP,YACRQ,EAAUhD,EAAMkD,QAAUH,EAAMP,WAAaQ,GAGxCA,G,EAGTG,cAAgB,SAACC,GACfA,EAAEC,iBACF,IAAMC,EAAW,GAEjB,IAAK,IAAIC,KAAU,EAAK1B,MAAMC,UAC5BwB,EAASC,GAAU,EAAK1B,MAAMC,UAAUyB,GAAQvD,MAGlD,IAAM8B,EAAY,CAChBV,YAAa,EAAKpC,MAAMwE,KACxBC,MAAO,EAAKzE,MAAMyE,MAClBC,UAAWJ,EACXK,OAAQ,EAAK3E,MAAM2E,QAGG,IAApB7B,EAAU2B,QACZG,MAAM,iCACN,EAAK5E,MAAM6E,QAAQrE,KAAK,MAGtBsC,EAAU2B,MAAQ,GACpB,EAAKzE,MAAM8E,gBAAgBhC,EAAW,EAAK9C,MAAM+E,Q,EAIrDC,mBAAqB,SAACZ,EAAGa,GACvB,IAAMC,EAAc,EAAKrC,MAAMC,UACzBqC,EAAWD,EAAYD,GAE7BE,EAASnE,MAAQoD,EAAEgB,OAAOpE,MAE1BmE,EAAS/B,MAAQ,EAAKU,SAASqB,EAASnE,MAAOmE,EAASjC,YAExDiC,EAAS5E,SAAU,EAEnB,IAAIsD,GAAc,EAElB,IAAK,IAAIwB,KAAUH,EACjBrB,EAAcqB,EAAYG,GAAQjC,OAASS,EAG7C,EAAKyB,SAAS,CAAExC,UAAWoC,EAAarB,YAAaA,K,4CAIvD,WAAU,IAAD,OACH0B,EAAW,GACf,IAAK,IAAIlE,KAAOmE,KAAK3C,MAAMC,UACzByC,EAAS/E,KAAK,CACZiF,GAAIpE,EACJqE,OAAQF,KAAK3C,MAAMC,UAAUzB,KAIjC,IAAIsE,EACF,0BAAMC,SAAUJ,KAAKrB,eAClBoB,EAASpE,KAAI,SAAApB,GACZ,OAAO,kBAAC8F,EAAA,EAAD,CACLxE,IAAKtB,EAAM0F,GACXpF,SAAUN,EAAM2F,OAAOtC,MACvB5B,MAAOzB,EAAM0F,GACb5E,WAAYd,EAAM2F,OAAO7E,WACzBH,SAAUX,EAAM2F,OAAO1C,SACvB/B,YAAalB,EAAM2F,OAAO7E,WAAWI,YACrCD,MAAOjB,EAAM2F,OAAO1E,MACpBT,QAASR,EAAM2F,OAAOnF,QACtBD,eAAgBP,EAAM2F,OAAOxC,WAC7BnC,OAAQ,SAACqD,GAAD,OAAQ,EAAKY,mBAAmBZ,EAAGrE,EAAM0F,UAGrD,kBAAClD,EAAA,EAAD,CACEC,QAAQ,UACRsD,UAAWN,KAAK3C,MAAMgB,aAFxB,UAUJ,OAHI2B,KAAKxF,MAAM+F,UACbJ,EAAO,kBAACK,EAAA,EAAD,OAGP,yBAAKrF,UAAWR,IAAOyC,aACrB,uDACC+C,O,GAvMiBM,aA8NXC,eAhBS,SAAArD,GACtB,MAAO,CACL2B,KAAM3B,EAAMsD,gBAAgB/D,YAC5BqC,MAAO5B,EAAMsD,gBAAgBC,WAC7BL,QAASlD,EAAMwD,MAAMN,QACrBhB,MAAOlC,EAAMyD,KAAKvB,MAClBJ,OAAQ9B,EAAMyD,KAAK3B,WAII,SAAA4B,GACzB,MAAO,CACLzB,gBAAiB,SAACJ,EAAWK,GAAZ,OAAsBwB,EAASC,IAA8B9B,EAAWK,QAI9EmB,CAA6CtD,GC/NtD6D,E,4MAeJC,eAAiB,WACf,EAAK1G,MAAM6E,QAAQ8B,U,EAGrBC,gBAAkB,WAChB,EAAK5G,MAAM6E,QAAQgC,QAAQ,2B,4CAG7B,WACE,IAAIC,EAAU,kBAAC,IAAD,CAAUxE,GAAG,MAE3B,GAAIkD,KAAKxF,MAAMwE,KAAM,CACnB,IAAMuC,EAAiBvB,KAAKxF,MAAMgH,UAAY,kBAAC,IAAD,CAAU1E,GAAG,MAAS,KACpEwE,EACE,kBAAC,IAAD,KACGC,EACD,kBAAClF,EAAD,CACEO,YAAaoD,KAAKxF,MAAMwE,KACxB9B,OAAQ8C,KAAKkB,eACb/D,QAAS6C,KAAKoB,kBAEhB,kBAAC,IAAD,CACEK,KAAMzB,KAAKxF,MAAMkH,MAAMD,KAAO,gBAC9BE,UAAWvE,KAKnB,OAAOkE,M,GA3CYb,aAsDRC,uBAPS,SAACrD,GACvB,MAAO,CACL2B,KAAM3B,EAAMsD,gBAAgB/D,YAC5B4E,UAAWnE,EAAMwD,MAAMe,UAIZlB,CAAyBO","file":"static/js/3.7e6abb93.chunk.js","sourcesContent":["import React from 'react';\nimport styles from './Input.module.css'\n\nconst input = (props) => {\n  let inputVar = null;\n\n  const inputStyles = [styles.InputEl]\n\n  if (props.invalid && props.shouldValidate && props.touched) {\n    inputStyles.push(styles.Invalid)\n  }\n\n  switch (props.elemtype) {\n    case ('input'):\n      inputVar = <input className={inputStyles.join(' ')}\n        {...props.elemConfig}\n        onChange={props.change}\n        value={props.value}\n        placeholder={props.placeholder} />;\n      break;\n    case ('select'):\n      inputVar = <select\n        className={inputStyles.join(' ')}{...props.elemConfig}\n        value={props.value}\n        onChange={props.change}\n      >\n        {props.elemConfig.options.map(option => {\n          return <option key={option.value} value={option.value}>\n            {option.displayVal}\n          </option>\n        })}\n      </select>;\n      break;\n    case ('textarea'):\n      inputVar = <textarea className={inputStyles.join(' ')}\n        value={props.value} onChange={props.change} {...props.elemConfig}></textarea>\n      break;\n    default:\n      inputVar = <input className={inputStyles.join(' ')}\n        {...props.elemConfig}\n        onChange={props.change}\n        value={props.value} />\n  }\n\n  return (\n    <div>\n      <label className={styles.Label}>{props.label}</label>\n      {inputVar}\n    </div>\n  )\n}\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3-cOb\",\"Label\":\"Input_Label__3SJpn\",\"InputEl\":\"Input_InputEl__3del8\",\"Invalid\":\"Input_Invalid__3X9KK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSum\":\"CheckoutSum_CheckoutSum__2ShPI\",\"Btn\":\"CheckoutSum_Btn__2XVkL\",\"Contain\":\"CheckoutSum_Contain__32NKQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactInfo\":\"ContactInfo_ContactInfo__1e3sM\"};","import React from 'react';\nimport Button from '../UI/Button/Button';\nimport { Link } from 'react-router-dom';\nimport IceCream from '../IceCream/IceCream';\nimport styles from './CheckoutSum.module.css';\nimport Aux from '../../hoc/Auxillary/Auxillary';\n\nconst checkoutSummary = (props) => {\n  return (\n    <Aux>\n      <div className={styles.Contain}>\n        <div className={styles.CheckoutSum}>\n          <h1 style={{ textAlign: 'center', paddingTop: '30px' }}>\n            We hope it Taste Amazing!\n          </h1>\n          <div style={{ width: '100%', margin: 'auto' }}>\n            <IceCream ingredients={props.ingredients} />\n          </div>\n        </div>\n      </div>\n      <div className={styles.Btn}>\n        <Link to='/'>\n          <Button btnType='Danger' clicked={props.cancel}>\n            CANCEL\n          </Button>\n        </Link>\n        <Button btnType='Success' clicked={props.proceed}>\n          CONTINUE\n        </Button>\n      </div>\n    </Aux>\n  );\n};\n\nexport default checkoutSummary;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Input from '../../../Components/UI/Input/Input';\nimport Button from '../../../Components/UI/Button/Button';\n// import axios from 'axios';\nimport styles from './ContactInfo.module.css';\nimport Spinner from '../../../Components/UI/Spinner/Spinner';\nimport * as orderActions from '../../../store/actions/index';\n\nclass ContactInfo extends Component {\n  state = {\n    orderForm: {\n      name: {\n        elemType: 'input',\n        elemConfig: {\n          placeholder: 'Your name',\n          type: 'text'\n        },\n        value: \"\",\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false\n      },\n      address: {\n        elemType: 'input',\n        elemConfig: {\n          placeholder: 'Your address',\n          type: 'text'\n        },\n        value: \"\",\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false\n      },\n      zipCode: {\n        elemType: 'input',\n        elemConfig: {\n          placeholder: 'Your postal code (in this format ---> K5T 1R3)',\n          type: 'text'\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          minLength: 7,\n          maxLength: 7\n        },\n        valid: false,\n        touched: false\n      },\n      city: {\n        elemType: 'input',\n        elemConfig: {\n          placeholder: 'Your City',\n          type: 'text'\n        },\n        value: \"\",\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false\n      },\n      province: {\n        elemType: 'input',\n        elemConfig: {\n          placeholder: 'Your Province',\n          type: 'text'\n        },\n        value: \"\",\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false\n      },\n      email: {\n        elemType: 'input',\n        elemConfig: {\n          placeholder: 'Your Province',\n          type: 'email'\n        },\n        value: \"\",\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false\n      },\n      deliveryMode: {\n        elemType: 'select',\n        elemConfig: {\n          options: [\n            { value: '', displayVal: 'please select a delivery method' },\n            { value: 'fastest', displayVal: 'Fastest' },\n            { value: 'basic', displayVal: 'Basic' }\n          ]\n        },\n        value: \"\",\n        validation: {},\n        valid: true\n      }\n    },\n    formIsValid: false\n  }\n\n  verified = (value, rules) => {\n    let isValid = true;\n\n    if (rules.required) {\n      isValid = value.trim() !== '';\n    }\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid\n    }\n    if (rules.maxLength) {\n      isValid = value.length <= rules.maxLength && isValid\n    }\n\n    return isValid\n  }\n\n  submitHandler = (e) => {\n    e.preventDefault();\n    const formInfo = {}\n\n    for (let formId in this.state.orderForm) {\n      formInfo[formId] = this.state.orderForm[formId].value\n    }\n\n    const orderForm = {\n      ingredients: this.props.ings,\n      price: this.props.price,\n      orderInfo: formInfo,\n      userId: this.props.userId\n    }\n\n    if (orderForm.price === 0) {\n      alert('Select some icecream flavours')\n      this.props.history.push('/')\n    }\n\n    if (orderForm.price > 2) {\n      this.props.onOrderIcecream(orderForm, this.props.token)\n    }\n  }\n\n  inputChangeHandler = (e, inputId) => {\n    const orderedForm = this.state.orderForm;\n    const targeted = orderedForm[inputId];\n\n    targeted.value = e.target.value;\n\n    targeted.valid = this.verified(targeted.value, targeted.validation);\n\n    targeted.touched = true;\n\n    let formIsValid = true;\n\n    for (let iptSel in orderedForm) {\n      formIsValid = orderedForm[iptSel].valid && formIsValid\n    }\n\n    this.setState({ orderForm: orderedForm, formIsValid: formIsValid })\n  }\n\n\n  render() {\n    let formsArr = [];\n    for (let key in this.state.orderForm) {\n      formsArr.push({\n        id: key,\n        config: this.state.orderForm[key]\n      })\n    }\n\n    let form = (\n      <form onSubmit={this.submitHandler}>\n        {formsArr.map(input => {\n          return <Input\n            key={input.id}\n            invalid={!input.config.valid}\n            label={input.id}\n            elemConfig={input.config.elemConfig}\n            elemtype={input.config.elemType}\n            placeholder={input.config.elemConfig.placeholder}\n            value={input.config.value}\n            touched={input.config.touched}\n            shouldValidate={input.config.validation}\n            change={(e) => (this.inputChangeHandler(e, input.id))}\n          />\n        })}\n        <Button\n          btnType=\"Success\"\n          disabled={!this.state.formIsValid}>\n          ORDER\n        </Button>\n      </form>\n    )\n    if (this.props.loading) {\n      form = <Spinner />\n    }\n    return (\n      <div className={styles.ContactInfo}>\n        <h4>Enter your contact info</h4>\n        {form}\n      </div>\n    )\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    ings: state.icecreamBuilder.ingredients,\n    price: state.icecreamBuilder.totalPrice,\n    loading: state.order.loading,\n    token: state.auth.token,\n    userId: state.auth.userId\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onOrderIcecream: (orderInfo, token) => dispatch(orderActions.purchaseIcecream(orderInfo, token))\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactInfo);","import React, { Component } from 'react';\nimport Aux from '../../hoc/Auxillary/Auxillary';\n\nimport { connect } from 'react-redux';\nimport { Route, Redirect } from 'react-router-dom';\nimport CheckoutSummary from '../../Components/CheckoutSummary/CheckoutSum';\nimport ContactInfo from './ContactInfo/ContactInfo';\n\nclass Checkout extends Component {\n  // componentWillMount() {\n  //   const query = new URLSearchParams(this.props.location.search)\n  //   const ingredients = {}\n  //   let price = 0;\n  //   for (let param of query.entries()) {\n  //     if (param[0] === 'price') {\n  //       price = param[1]\n  //     } else {\n  //       ingredients[param[0]] = +param[1]\n  //     }\n  //   }\n  //   this.setState({ ingredients: ingredients, price: price })\n  // }\n\n  checkoutCancel = () => {\n    this.props.history.goBack();\n  };\n\n  checkoutProceed = () => {\n    this.props.history.replace('/checkout/contact-info');\n  };\n\n  render() {\n    let summary = <Redirect to='/' />;\n\n    if (this.props.ings) {\n      const boughtRedirect = this.props.purchased ? <Redirect to='/' /> : null;\n      summary = (\n        <Aux>\n          {boughtRedirect}\n          <CheckoutSummary\n            ingredients={this.props.ings}\n            cancel={this.checkoutCancel}\n            proceed={this.checkoutProceed}\n          />\n          <Route\n            path={this.props.match.path + '/contact-info'}\n            component={ContactInfo}\n          />\n        </Aux>\n      );\n    }\n    return summary;\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    ings: state.icecreamBuilder.ingredients,\n    purchased: state.order.bought,\n  };\n};\n\nexport default connect(mapStateToProps)(Checkout);\n"],"sourceRoot":""}