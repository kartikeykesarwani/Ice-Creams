{"version":3,"sources":["Components/UI/Input/Input.js","Components/UI/Input/Input.module.css","Containers/Auth/Auth.module.css","Containers/Auth/Auth.js"],"names":["input","props","inputVar","inputStyles","styles","InputEl","invalid","shouldValidate","touched","push","Invalid","elemtype","className","join","elemConfig","onChange","change","value","placeholder","options","map","option","key","displayVal","Label","label","module","exports","Auth","state","controls","email","elemType","type","validation","required","isEmail","valid","password","minLength","isSignup","inputChangedHandler","event","controlName","updatedControls","target","verified","setState","submitHandler","preventDefault","onAuth","switchAuthModeHandler","prevState","this","building","authRedirectPath","onSetAuthRedirectPath","rules","isValid","trim","length","maxLength","test","isNumeric","formsArr","id","config","form","formEl","loading","errorMessage","error","style","color","fontWeight","message","authRedirect","isAuth","to","action","onSubmit","btnType","clicked","Component","connect","auth","token","icecreamBuilder","dispatch","authActions"],"mappings":"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","file":"static/js/4.a3ff5e22.chunk.js","sourcesContent":["import React from 'react';\nimport styles from './Input.module.css'\n\nconst input = (props) => {\n  let inputVar = null;\n\n  const inputStyles = [styles.InputEl]\n\n  if (props.invalid && props.shouldValidate && props.touched) {\n    inputStyles.push(styles.Invalid)\n  }\n\n  switch (props.elemtype) {\n    case ('input'):\n      inputVar = <input className={inputStyles.join(' ')}\n        {...props.elemConfig}\n        onChange={props.change}\n        value={props.value}\n        placeholder={props.placeholder} />;\n      break;\n    case ('select'):\n      inputVar = <select\n        className={inputStyles.join(' ')}{...props.elemConfig}\n        value={props.value}\n        onChange={props.change}\n      >\n        {props.elemConfig.options.map(option => {\n          return <option key={option.value} value={option.value}>\n            {option.displayVal}\n          </option>\n        })}\n      </select>;\n      break;\n    case ('textarea'):\n      inputVar = <textarea className={inputStyles.join(' ')}\n        value={props.value} onChange={props.change} {...props.elemConfig}></textarea>\n      break;\n    default:\n      inputVar = <input className={inputStyles.join(' ')}\n        {...props.elemConfig}\n        onChange={props.change}\n        value={props.value} />\n  }\n\n  return (\n    <div>\n      <label className={styles.Label}>{props.label}</label>\n      {inputVar}\n    </div>\n  )\n}\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3-cOb\",\"Label\":\"Input_Label__3SJpn\",\"InputEl\":\"Input_InputEl__3del8\",\"Invalid\":\"Input_Invalid__3X9KK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__i5DVX\"};","import React, { Component } from 'react';\nimport Input from '../../Components/UI/Input/Input';\nimport Button from '../../Components/UI/Button/Button';\nimport styles from './Auth.module.css';\nimport * as authActions from '../../store/actions/index';\nimport Spinner from '../../Components/UI/Spinner/Spinner';\nimport { connect } from 'react-redux';\n\nimport { Redirect } from 'react-router-dom';\n\nclass Auth extends Component {\n  state = {\n    controls: {\n      email: {\n        elemType: 'input',\n        elemConfig: {\n          type: 'email',\n          placeholder: 'Email address',\n        },\n        value: '',\n        validation: {\n          required: true,\n          isEmail: true,\n        },\n        valid: false,\n        touched: false,\n      },\n      password: {\n        elemType: 'input',\n        elemConfig: {\n          type: 'password',\n          placeholder: 'Password',\n        },\n        value: '',\n        validation: {\n          required: true,\n          minLength: 6,\n        },\n        valid: false,\n        touched: false,\n      },\n    },\n    isSignup: true,\n  };\n\n  componentDidMount() {\n    if (!this.props.building && this.props.authRedirectPath !== '/') {\n      this.props.onSetAuthRedirectPath();\n    }\n  }\n\n  verified(value, rules) {\n    let isValid = true;\n    if (!rules) {\n      return true;\n    }\n\n    if (rules.required) {\n      isValid = value.trim() !== '' && isValid;\n    }\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n    if (rules.maxLength) {\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n\n    if (rules.isEmail) {\n      const pattern =\n        /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    if (rules.isNumeric) {\n      const pattern = /^\\d+$/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    return isValid;\n  }\n\n  inputChangedHandler = (event, controlName) => {\n    const updatedControls = {\n      ...this.state.controls,\n      [controlName]: {\n        ...this.state.controls[controlName],\n        value: event.target.value,\n        valid: this.verified(\n          event.target.value,\n          this.state.controls[controlName].validation\n        ),\n        touched: true,\n      },\n    };\n    this.setState({ controls: updatedControls });\n  };\n\n  submitHandler = (event) => {\n    event.preventDefault();\n    this.props.onAuth(\n      this.state.controls.email.value,\n      this.state.controls.password.value,\n      this.state.isSignup\n    );\n  };\n\n  switchAuthModeHandler = () => {\n    this.setState((prevState) => {\n      return { isSignup: !prevState.isSignup };\n    });\n  };\n\n  render() {\n    const formsArr = [];\n    for (let key in this.state.controls) {\n      formsArr.push({\n        id: key,\n        config: this.state.controls[key],\n      });\n    }\n\n    let form = formsArr.map((formEl) => (\n      <Input\n        key={formEl.id}\n        invalid={!formEl.config.valid}\n        label={formEl.id}\n        elemConfig={formEl.config.elemConfig}\n        elemtype={formEl.config.elemType}\n        placeholder={formEl.config.elemConfig.placeholder}\n        value={formEl.config.value}\n        touched={formEl.config.touched}\n        shouldValidate={formEl.config.validation}\n        change={(event) => this.inputChangedHandler(event, formEl.id)}\n      />\n    ));\n\n    if (this.props.loading) {\n      form = <Spinner />;\n    }\n\n    let errorMessage = null;\n    if (this.props.error) {\n      errorMessage = (\n        <p style={{ color: 'red', fontWeight: 'bold' }}>\n          {this.props.error.message}\n        </p>\n      );\n    }\n    let authRedirect = null;\n    if (this.props.isAuth) {\n      authRedirect = <Redirect to={this.props.authRedirect} />;\n    }\n    return (\n      <div className={styles.Auth}>\n        {authRedirect}\n        {errorMessage}\n        <form action='' onSubmit={this.submitHandler}>\n          {form}\n          <Button btnType='Success'>SUBMIT</Button>\n        </form>\n\n        <Button clicked={this.switchAuthModeHandler} btnType='Danger'>\n          SWITCH TO {this.state.isSignup ? 'SIGN IN' : 'SIGN UP'}\n        </Button>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    isAuth: state.auth.token !== null,\n    building: state.icecreamBuilder.building,\n    authRedirect: state.auth.authRedirectPath,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onAuth: (email, password, isSignup) =>\n      dispatch(authActions.auth(email, password, isSignup)),\n    onSetAuthRedirectPath: () => dispatch(authActions.setAuthRedirectPath('/')),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\n"],"sourceRoot":""}